/**
 * 构建webpack.common.js、webpack.conf.js的入口文件src/index.js
 * webpack.common.js  => lib/runner-ui.common.js, webpack.conf.js => lib/index.js
 */
var fs = require('fs');
var path = require('path');
var endOfLine = require('os').EOL;			// 操作系统特定的行末标志,在 POSIX 上是 \n, 在 Windows 上是 \r\n
var render = require('json-templater/string');					// 字符串模板生成器
var uppercamelcase = require('uppercamelcase');					// 大驼峰转换器
var Components = require('../../components.json');

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');									// 文件输出路径
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';				// 组件导入模板
var INSTALL_COMPONENT_TEMPLATE = '	{{name}}';													// 组件名

// 文件内容模板
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}

const components = [
{{install}}];

const install = function(Vue, opts = {}) {

	components.forEach(component => {
		Vue.component(component.name, component);
	});

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
	install(window.Vue);
}

export default {
	version: '{{version}}',
	install,
{{list}}
};
`;

// delete Components.font;

var ComponentNames = Object.keys(Components);
var excludeInstallComp = [];				// 排除全局安装组件（实例方法）
var includeComponentTemplate = [];			// 所有导入组件语句集合数组
var installTemplate = [];					// 组件数组（全局引用）
var listTemplate = [];						// 组件数组（按需引入）

ComponentNames.forEach(name => {
	var componentName = uppercamelcase(name);

	includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
		name: componentName,
		package: name
	}));

	if (excludeInstallComp.indexOf(componentName) === -1) {
		installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
			name: componentName
		}));
	}

	listTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
		name: componentName
	}));
});

var template = render(MAIN_TEMPLATE, {
	include: includeComponentTemplate.join(endOfLine),
	install: installTemplate.join(',' + endOfLine),
	version: process.env.VERSION || require('../../package.json').version,
	list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

